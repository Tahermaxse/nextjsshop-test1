generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  name               String?
  image              String?
  emailVerified      DateTime?
  isEmailVerified    Boolean             @default(false)
  password           String?
  role               String              @default("user")
  accounts           Account[]
  orders             Order[]
  templatePurchases  TemplatePurchase[]
  componentPurchases ComponentPurchase[]
  sessions           Session[]
  reports            Report[]
  ReportComponent    ReportComponent[]
  notifications      Notification[]
  comments           Comment[]
  commentReactions   CommentReaction[]
  templateComments   TemplateComment[]
  templateCommentReactions TemplateCommentReaction[]
  quoteRequests      QuoteRequest[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  canComment         Boolean           @default(true)
  canReport          Boolean           @default(true)
  lastLogin          DateTime?
  passwordResetTokens PasswordResetToken[]
  cookieConsents     CookieConsent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id          String              @id @default(cuid())
  name        String
  price       Float
  author      String
  authorUrl   String
  image       String
  description String
  updatedAt   DateTime
  views       Int
  pages       Int
  categories  String[]
  pagesList   String[]
  preview     String
  zip         String
  paragraph1  String?
  paragraph2  String?
  urlname     String
  features    Feature[]          @relation("TemplateFeatures")
  images      Image[]            @relation("TemplateImages")
  orders      Order[]
  purchases   TemplatePurchase[]
  reports     Report[]
  comments    TemplateComment[]
}

model Components {
  id              String                @id @default(cuid())
  name            String
  price           Float
  author          String
  authorUrl       String
  image           String
  description     String
  updatedAt       DateTime
  views           Int
  pages           Int
  categories      String[]
  pagesList       String[]
  preview         String
  zip             String
  paragraph1      String?
  paragraph2      String?
  urlname         String
  videos          Video[]             @relation("ComponentsVideos")
  features        Feature[]           @relation("ComponentsFeatures")
  images          Image[]             @relation("ComponentsImages")
  orders          Order[]
  purchases       ComponentPurchase[]
  ReportComponent ReportComponent[]
  comments        Comment[]
}

model Feature {
  id          Int         @id @default(autoincrement())
  question    String
  answer      String
  templateId  String?
  componentId String?
  template    Template?   @relation("TemplateFeatures", fields: [templateId], references: [id])
  component   Components? @relation("ComponentsFeatures", fields: [componentId], references: [id])
}

model Image {
  id          Int         @id @default(autoincrement())
  src         String
  alt         String
  templateId  String?
  componentId String?
  template    Template?   @relation("TemplateImages", fields: [templateId], references: [id])
  component   Components? @relation("ComponentsImages", fields: [componentId], references: [id])
}

model Video {
  id          Int        @id @default(autoincrement())
  src         String
  alt         String
  componentId String
  component   Components @relation("ComponentsVideos", fields: [componentId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  amount      Float
  currency    String      @default("INR")
  status      String
  razorpayId  String?     @unique
  templateId  String?
  componentId String?
  userId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  template    Template?   @relation(fields: [templateId], references: [id])
  component   Components? @relation(fields: [componentId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model TemplatePurchase {
  id                Int      @id @default(autoincrement())
  userId            Int
  templateId        String
  purchaseDate      DateTime @default(now())
  razorpayOrderId   String
  razorpayPaymentId String
  amount            Float
  currency          String   @default("USD")
  status            String
  template          Template @relation(fields: [templateId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, templateId]) // Ensure a user can only purchase a template once
}

model ComponentPurchase {
  id                Int        @id @default(autoincrement())
  userId            Int
  componentId       String
  purchaseDate      DateTime   @default(now())
  razorpayOrderId   String
  razorpayPaymentId String
  amount            Float
  currency          String     @default("USD")
  status            String
  component         Components @relation(fields: [componentId], references: [id]) // Fixed naming inconsistency
  user              User       @relation(fields: [userId], references: [id])

  @@unique([userId, componentId]) // Ensure a user can only purchase a component once
}

model Report {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  email       String
  reason      String
  details     String   @db.Text
  imageUrl    String?  // Store Cloudinary URL instead of binary data
  status      String   @default("pending")
  adminMessage String?  @db.Text
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  @@index([templateId])
  @@index([userId])
}

model ReportComponent {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  email       String
  reason      String
  details     String     @db.Text
  imageUrl    String? // Store Cloudinary URL instead of binary data
  status      String     @default("pending")
  component   Components @relation(fields: [componentId], references: [id])
  componentId String
  user        User       @relation(fields: [userId], references: [id])
  userId      Int

  @@index([componentId])
  @@index([userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  message   String   @db.Text
  type      String
  read      Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  componentId String
  userId      Int
  parentId    Int?      // For replies
  component   Components @relation(fields: [componentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  reactions   CommentReaction[]
  images      CommentImage[]

  @@index([componentId])
  @@index([userId])
  @@index([parentId])
}

model CommentImage {
  id        Int      @id @default(autoincrement())
  url       String
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
}

model CommentReaction {
  id        String   @id @default(cuid())
  type      String
  userId    Int
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}

model TemplateComment {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  templateId  String
  userId      Int
  parentId    Int?      // For replies
  template    Template  @relation(fields: [templateId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  parent      TemplateComment?  @relation("TemplateCommentReplies", fields: [parentId], references: [id])
  replies     TemplateComment[] @relation("TemplateCommentReplies")
  reactions   TemplateCommentReaction[]
  images      TemplateCommentImage[]

  @@index([templateId])
  @@index([userId])
  @@index([parentId])
}

model TemplateCommentImage {
  id        Int       @id @default(autoincrement())
  url       String
  commentId Int
  comment   TemplateComment  @relation(fields: [commentId], references: [id])
}

model TemplateCommentReaction {
  id        String   @id @default(cuid())
  type      String
  userId    Int
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  comment   TemplateComment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId])
}

model QuoteRequest {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  company     String?
  serviceType String
  otherService String?
  projectInfo String
  budget      String?
  status      String   @default("pending")
  adminMessage String?
  adminMessageRead Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  source      String?  
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model CookieConsent {
  id          Int      @id @default(autoincrement())
  userId      Int?     // Nullable for anonymous users
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  consent     String   // "accepted" or "rejected"
  userAgent   String?  // Browser user agent
  ipAddress   String?  // User's IP address
  country     String?  // User's country from currency detection
  currency    String?  // User's preferred currency
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([consent])
  @@index([createdAt])
}