{
  "name": "datepicker-03",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "dependencies": [
    "lucide-react",
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  format,\r\n  subDays,\r\n  subMonths,\r\n  startOfMonth,\r\n  startOfYear,\r\n  isSameDay,\r\n  isWithinInterval,\r\n  startOfDay,\r\n} from \"date-fns\"\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Dialog, DialogContent, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\n\r\ninterface DateRange {\r\n  from: Date\r\n  to: Date\r\n}\r\n\r\ninterface DateRangePickerDialogProps {\r\n  onRangeChange?: (range: DateRange) => void\r\n  className?: string\r\n}\r\n\r\nexport function DateRangePickerDialog({ onRangeChange, className }: DateRangePickerDialogProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [dateRange, setDateRange] = React.useState<DateRange>({\r\n    from: new Date(2025, 2, 22), // Mar 22, 2025\r\n    to: new Date(2025, 2, 29), // Mar 29, 2025\r\n  })\r\n  const [tempDateRange, setTempDateRange] = React.useState<DateRange>(dateRange)\r\n  const [currentMonth, setCurrentMonth] = React.useState(new Date(2025, 2)) // March 2025\r\n  const [selectionMode, setSelectionMode] = React.useState<\"start\" | \"end\">(\"start\")\r\n\r\n  const today = new Date()\r\n\r\n  const presetOptions = [\r\n    {\r\n      label: \"Today\",\r\n      getRange: () => ({ from: today, to: today }),\r\n    },\r\n    {\r\n      label: \"Last 7 days\",\r\n      getRange: () => ({ from: subDays(today, 6), to: today }),\r\n    },\r\n    {\r\n      label: \"Last 30 days\",\r\n      getRange: () => ({ from: subDays(today, 29), to: today }),\r\n    },\r\n    {\r\n      label: \"Last 3 months\",\r\n      getRange: () => ({ from: subMonths(today, 3), to: today }),\r\n    },\r\n    {\r\n      label: \"Last 12 months\",\r\n      getRange: () => ({ from: subMonths(today, 12), to: today }),\r\n    },\r\n    {\r\n      label: \"Month to date\",\r\n      getRange: () => ({ from: startOfMonth(today), to: today }),\r\n    },\r\n    {\r\n      label: \"Year to date\",\r\n      getRange: () => ({ from: startOfYear(today), to: today }),\r\n    },\r\n  ]\r\n\r\n  const handleApply = () => {\r\n    setDateRange(tempDateRange)\r\n    if (onRangeChange) onRangeChange(tempDateRange)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setTempDateRange(dateRange)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handlePresetSelect = (getRange: () => DateRange) => {\r\n    const newRange = getRange()\r\n    setTempDateRange(newRange)\r\n    setCurrentMonth(new Date(newRange.from.getFullYear(), newRange.from.getMonth()))\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      setTempDateRange(dateRange)\r\n    }\r\n  }, [open, dateRange])\r\n\r\n  const getDaysInMonth = (year: number, month: number) => {\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\r\n    const firstDayOfMonth = new Date(year, month, 1).getDay()\r\n\r\n    const days = []\r\n\r\n    // Previous month days\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n      const prevMonthDay = new Date(year, month, -i)\r\n      days.unshift({\r\n        date: prevMonthDay,\r\n        isCurrentMonth: false,\r\n      })\r\n    }\r\n\r\n    // Current month days\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const currentMonthDay = new Date(year, month, i)\r\n      days.push({\r\n        date: currentMonthDay,\r\n        isCurrentMonth: true,\r\n      })\r\n    }\r\n\r\n    // Next month days\r\n    const remainingDays = 42 - days.length // 6 rows of 7 days\r\n    for (let i = 1; i <= remainingDays; i++) {\r\n      const nextMonthDay = new Date(year, month + 1, i)\r\n      days.push({\r\n        date: nextMonthDay,\r\n        isCurrentMonth: false,\r\n      })\r\n    }\r\n\r\n    return days\r\n  }\r\n\r\n  const days = getDaysInMonth(currentMonth.getFullYear(), currentMonth.getMonth())\r\n  const weekDays = [\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"]\r\n\r\n  const prevMonth = () => {\r\n    setCurrentMonth((prev) => new Date(prev.getFullYear(), prev.getMonth() - 1))\r\n  }\r\n\r\n  const nextMonth = () => {\r\n    setCurrentMonth((prev) => new Date(prev.getFullYear(), prev.getMonth() + 1))\r\n  }\r\n\r\n  const isSelected = (date: Date) => {\r\n    return isSameDay(date, tempDateRange.from) || isSameDay(date, tempDateRange.to)\r\n  }\r\n\r\n  const isInRange = (date: Date) => {\r\n    if (!tempDateRange.from || !tempDateRange.to) return false\r\n    return isWithinInterval(date, {\r\n      start: startOfDay(tempDateRange.from),\r\n      end: startOfDay(tempDateRange.to),\r\n    })\r\n  }\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    if (selectionMode === \"start\") {\r\n      setTempDateRange({ from: date, to: date })\r\n      setSelectionMode(\"end\")\r\n    } else {\r\n      // Ensure the range is always from earlier date to later date\r\n      if (date < tempDateRange.from) {\r\n        setTempDateRange({ from: date, to: tempDateRange.from })\r\n      } else {\r\n        setTempDateRange({ ...tempDateRange, to: date })\r\n      }\r\n      setSelectionMode(\"start\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className={cn(\r\n            \"w-full justify-center text-center font-normal h-8 sm:h-10 px-2 sm:px-3 py-1.5 sm:py-2 rounded-md border border-input bg-white dark:bg-background text-xs sm:text-sm\",\r\n            className,\r\n          )}\r\n        >\r\n          {format(dateRange.from, \"MMM dd, yyyy\")} - {format(dateRange.to, \"MMM dd, yyyy\")}\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"p-0 bg-white dark:bg-zinc-900 rounded-lg shadow-lg max-w-[100vw] xs:max-w-[95vw] sm:max-w-[700px] w-auto\">\r\n        <DialogTitle className=\"sr-only\">Select a date range</DialogTitle>\r\n        <div className=\"flex flex-col sm:flex-row\">\r\n          {/* Sidebar with preset options */}\r\n          <div className=\"w-full sm:w-[200px] border-b sm:border-b-0 sm:border-r dark:border-zinc-800 max-h-28 xs:max-h-32 sm:max-h-none\">\r\n            <div className=\"flex sm:block overflow-x-auto sm:overflow-x-visible scrollbar-hide pb-1.5 sm:pb-2\">\r\n              {presetOptions.map((option, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={cn(\r\n                    \"px-2 xs:px-3 sm:px-4 py-1.5 xs:py-2 sm:py-3 text-[10px] xs:text-xs sm:text-sm cursor-pointer dark:text-zinc-300\",\r\n                    \"hover:bg-gray-50 dark:hover:bg-zinc-800 flex-shrink-0 sm:flex-shrink sm:block\",\r\n                    \"first:ml-1 xs:first:ml-2 sm:first:ml-0 last:mr-1 xs:last:mr-2 sm:last:mr-0\",\r\n                    index === 0 && \"bg-gray-100 dark:bg-zinc-800\"\r\n                  )}\r\n                  onClick={() => handlePresetSelect(option.getRange)}\r\n                >\r\n                  {option.label}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Calendar */}\r\n          <div className=\"p-1.5 xs:p-2 sm:p-4 w-full sm:w-auto\">\r\n            <div className=\"flex items-center justify-between mb-1.5 xs:mb-2 sm:mb-4\">\r\n              <button onClick={prevMonth} className=\"p-0.5 xs:p-1 text-zinc-400 hover:text-zinc-300\">\r\n                <ChevronLeft className=\"h-3 w-3 xs:h-4 xs:w-4 sm:h-5 sm:w-5\" />\r\n              </button>\r\n              <div className=\"text-[10px] xs:text-xs sm:text-sm font-medium dark:text-zinc-300\">\r\n                {format(currentMonth, \"MMMM yyyy\")}\r\n              </div>\r\n              <button onClick={nextMonth} className=\"p-0.5 xs:p-1 text-zinc-400 hover:text-zinc-300\">\r\n                <ChevronRight className=\"h-3 w-3 xs:h-4 xs:w-4 sm:h-5 sm:w-5\" />\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-7 gap-0.5 text-center mb-0.5 xs:mb-1 sm:mb-2\">\r\n              {weekDays.map((day) => (\r\n                <div key={day} className=\"text-[8px] xs:text-[10px] sm:text-xs text-gray-500 dark:text-zinc-500 font-medium py-0.5\">\r\n                  {day}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-7 gap-0.5\">\r\n              {days.map((day, index) => {\r\n                const isSelectedDay = isSelected(day.date)\r\n                const isInRangeDay = isInRange(day.date)\r\n\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className={cn(\r\n                      \"h-5 w-5 xs:h-6 xs:w-6 sm:h-8 sm:w-8 flex items-center justify-center text-[10px] xs:text-xs sm:text-sm rounded-md\",\r\n                      !day.isCurrentMonth && \"text-gray-300 dark:text-zinc-700\",\r\n                      day.isCurrentMonth && !isSelectedDay && !isInRangeDay && \"dark:text-zinc-300 hover:bg-gray-100 dark:hover:bg-zinc-800 cursor-pointer\",\r\n                      isInRangeDay && !isSelectedDay && \"bg-blue-100 dark:bg-blue-500/20 dark:text-blue-400\",\r\n                      isSelectedDay && \"bg-blue-500 dark:bg-blue-500 text-white\"\r\n                    )}\r\n                    onClick={() => day.isCurrentMonth && handleDateClick(day.date)}\r\n                  >\r\n                    {day.date.getDate()}\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n\r\n            <div className=\"mt-1.5 xs:mt-2 sm:mt-4 flex flex-col sm:flex-row items-start sm:items-center justify-between\">\r\n              <div className=\"text-[8px] xs:text-[10px] sm:text-xs text-gray-600 dark:text-zinc-400 mb-1.5 xs:mb-2 sm:mb-0\">\r\n                Range: {format(tempDateRange.from, \"MMM dd, yyyy\")} - {format(tempDateRange.to, \"MMM dd, yyyy\")}\r\n              </div>\r\n              <div className=\"flex space-x-1 w-full sm:w-auto\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  size=\"sm\" \r\n                  onClick={handleCancel} \r\n                  className=\"text-[10px] xs:text-xs sm:text-sm flex-1 sm:flex-none h-6 xs:h-7 sm:h-8 dark:border-zinc-700 dark:text-zinc-300 dark:hover:bg-zinc-800\"\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  size=\"sm\"\r\n                  onClick={handleApply}\r\n                  className=\"bg-blue-500 hover:bg-blue-600 dark:bg-blue-500 dark:hover:bg-blue-600 text-white text-[10px] xs:text-xs sm:text-sm flex-1 sm:flex-none h-6 xs:h-7 sm:h-8\"\r\n                >\r\n                  Apply\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}",
      "path": "block/Datepicker/datepicker-03/date-picker.tsx",
      "target": "components/block/Datepicker/datepicker-03/date-picker.tsx"
    }
  ]
}