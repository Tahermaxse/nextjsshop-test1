{
  "name": "datepicker-02",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "dependencies": [
    "lucide-react",
    "date-fns"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format, addDays, endOfWeek, isSameDay } from \"date-fns\"\r\nimport { CalendarIcon, Clock, X, Star } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Dialog, DialogContent, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\r\n\r\ninterface DatePickerProps {\r\n  onDateSelect?: (date: Date | undefined) => void\r\n}\r\n\r\nexport function DatePicker02({ onDateSelect }: DatePickerProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [date, setDate] = React.useState<Date | undefined>(undefined)\r\n  const [tempDate, setTempDate] = React.useState<Date | undefined>(undefined)\r\n  const [currentMonth, setCurrentMonth] = React.useState(new Date(2025, 2)) // March 2025\r\n\r\n  const today = new Date()\r\n  const tomorrow = addDays(today, 1)\r\n  const laterThisWeek = endOfWeek(today, { weekStartsOn: 1 })\r\n  const nextWeek = addDays(endOfWeek(today, { weekStartsOn: 1 }), 7)\r\n\r\n  const presetOptions = [\r\n    {\r\n      icon: <Star className=\"h-4 w-4 text-yellow-400\" />,\r\n      label: \"Tomorrow\",\r\n      date: tomorrow,\r\n      dayName: \"Sunday\",\r\n    },\r\n    {\r\n      icon: <CalendarIcon className=\"h-4 w-4 text-green-400\" />,\r\n      label: \"Later this week\",\r\n      date: laterThisWeek,\r\n      dayName: \"Saturday\",\r\n    },\r\n    {\r\n      icon: <CalendarIcon className=\"h-4 w-4 text-purple-400\" />,\r\n      label: \"Next week\",\r\n      date: nextWeek,\r\n      dayName: \"Sat, 29 March\",\r\n    },\r\n    {\r\n      icon: <Clock className=\"h-4 w-4 text-red-400\" />,\r\n      label: \"No date\",\r\n      date: undefined,\r\n      dayName: \"Saturday\",\r\n    },\r\n  ]\r\n\r\n  const handleApply = () => {\r\n    setDate(tempDate)\r\n    if (onDateSelect) onDateSelect(tempDate)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    setTempDate(date)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handlePresetSelect = (selectedDate: Date | undefined) => {\r\n    setTempDate(selectedDate)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      setTempDate(date)\r\n    }\r\n  }, [open, date])\r\n\r\n  const getDaysInMonth = (year: number, month: number) => {\r\n    const daysInMonth = new Date(year, month + 1, 0).getDate()\r\n    const firstDayOfMonth = new Date(year, month, 1).getDay()\r\n    const daysFromPrevMonth = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1 // Adjust for Monday start\r\n\r\n    const days = []\r\n\r\n    // Previous month days\r\n    const prevMonthDays = new Date(year, month, 0).getDate()\r\n    for (let i = prevMonthDays - daysFromPrevMonth + 1; i <= prevMonthDays; i++) {\r\n      days.push({\r\n        day: i,\r\n        month: month - 1,\r\n        year,\r\n        isCurrentMonth: false,\r\n      })\r\n    }\r\n\r\n    // Current month days\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      days.push({\r\n        day: i,\r\n        month,\r\n        year,\r\n        isCurrentMonth: true,\r\n      })\r\n    }\r\n\r\n    // Next month days\r\n    const remainingDays = 42 - days.length // 6 rows of 7 days\r\n    for (let i = 1; i <= remainingDays; i++) {\r\n      days.push({\r\n        day: i,\r\n        month: month + 1,\r\n        year,\r\n        isCurrentMonth: false,\r\n      })\r\n    }\r\n\r\n    return days\r\n  }\r\n\r\n  const days = getDaysInMonth(currentMonth.getFullYear(), currentMonth.getMonth())\r\n  const weekDays = [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]\r\n\r\n  const prevMonth = () => {\r\n    setCurrentMonth((prev) => new Date(prev.getFullYear(), prev.getMonth() - 1))\r\n  }\r\n\r\n  const nextMonth = () => {\r\n    setCurrentMonth((prev) => new Date(prev.getFullYear(), prev.getMonth() + 1))\r\n  }\r\n\r\n  const isSelectedDate = (day: number, month: number, year: number) => {\r\n    if (!tempDate) return false\r\n    return tempDate.getDate() === day && tempDate.getMonth() === month && tempDate.getFullYear() === year\r\n  }\r\n\r\n  const isCurrentDate = (day: number, month: number, year: number) => {\r\n    return day === 29 && month === 2 && year === 2025\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className=\"w-full justify-center text-center font-normal h-10 px-3 py-2 rounded-full border border-input bg-background text-sm\"\r\n        >\r\n          {date ? format(date, \"PPP\") : \"Select a date\"}\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"sm:max-w-[425px] p-0 gap-0 rounded-2xl border shadow-lg dark:bg-zinc-900 dark:border-zinc-800\">\r\n        <DialogTitle className=\"sr-only\">Select a date</DialogTitle>\r\n        <div className=\"p-4 pb-0\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5 text-gray-400 dark:text-zinc-500\" />\r\n              <span className=\"text-sm text-gray-600 dark:text-zinc-300\">Select a time</span>\r\n            </div>\r\n            <button className=\"rounded-full p-1 hover:bg-gray-100 dark:hover:bg-zinc-800\" onClick={() => setOpen(false)}>\r\n              <X className=\"h-4 w-4 dark:text-zinc-400\" />\r\n            </button>\r\n          </div>\r\n          <div className=\"mt-4 space-y-1\">\r\n            {presetOptions.map((option, index) => (\r\n              <div\r\n                key={index}\r\n                className={cn(\r\n                  \"flex items-center justify-between p-2 rounded-md cursor-pointer\",\r\n                  (tempDate && option.date && isSameDay(tempDate, option.date)) || (!tempDate && !option.date)\r\n                    ? \"bg-gray-900 text-white dark:bg-blue-500\"\r\n                    : \"dark:text-zinc-300 hover:bg-gray-100 dark:hover:bg-zinc-800\",\r\n                )}\r\n                onClick={() => handlePresetSelect(option.date)}\r\n              >\r\n                <div className=\"flex items-center gap-2\">\r\n                  {option.icon}\r\n                  <span className=\"text-sm\">{option.label}</span>\r\n                </div>\r\n                <span className={cn(\r\n                  \"text-sm\",\r\n                  (tempDate && option.date && isSameDay(tempDate, option.date)) || (!tempDate && !option.date)\r\n                    ? \"text-gray-400\"\r\n                    : \"text-gray-400 dark:text-zinc-500\"\r\n                )}>\r\n                  {option.dayName}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"p-4\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <button onClick={prevMonth} className=\"p-1 text-gray-500 hover:text-gray-700 dark:text-zinc-400 dark:hover:text-zinc-300\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path\r\n                  d=\"M15 18L9 12L15 6\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n              </svg>\r\n            </button>\r\n            <div className=\"text-sm font-medium dark:text-zinc-300\">{format(currentMonth, \"MMMM yyyy\")}</div>\r\n            <button onClick={nextMonth} className=\"p-1 text-gray-500 hover:text-gray-700 dark:text-zinc-400 dark:hover:text-zinc-300\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path\r\n                  d=\"M9 6L15 12L9 18\"\r\n                  stroke=\"currentColor\"\r\n                  strokeWidth=\"2\"\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-7 gap-1 text-center\">\r\n            {weekDays.map((day) => (\r\n              <div key={day} className=\"text-xs text-gray-500 dark:text-zinc-500 font-medium py-1\">\r\n                {day}\r\n              </div>\r\n            ))}\r\n\r\n            {days.map((day, index) => {\r\n              const isSelectedDay = isSelectedDate(day.day, day.month, day.year)\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={cn(\r\n                    \"relative h-8 w-8 flex items-center justify-center text-sm rounded-full\",\r\n                    !day.isCurrentMonth && \"text-gray-300 dark:text-zinc-700\",\r\n                    day.isCurrentMonth && \"cursor-pointer dark:text-zinc-300\",\r\n                    day.isCurrentMonth && !isSelectedDay && \"hover:bg-gray-100 dark:hover:bg-zinc-800\",\r\n                    isSelectedDay && \"bg-blue-500 text-white hover:bg-blue-600\"\r\n                  )}\r\n                  onClick={() => {\r\n                    if (day.isCurrentMonth) {\r\n                      setTempDate(new Date(day.year, day.month, day.day))\r\n                    }\r\n                  }}\r\n                >\r\n                  {day.day}\r\n                  {isCurrentDate(day.day, day.month, day.year) && !isSelectedDay && (\r\n                    <div className=\"absolute bottom-1 w-1 h-1 bg-blue-500 rounded-full\"></div>\r\n                  )}\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between p-4 pt-2 border-t mt-2 dark:border-zinc-800\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={handleCancel}\r\n            className=\"flex-1 mr-2 rounded-md border border-gray-200 bg-white dark:bg-transparent dark:border-zinc-700 dark:text-zinc-300 dark:hover:bg-zinc-800 text-gray-700 hover:bg-gray-50\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleApply} \r\n            className=\"flex-1 rounded-md bg-blue-500 hover:bg-blue-600 dark:bg-blue-500 dark:hover:bg-blue-600 text-white\"\r\n          >\r\n            Apply\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\n",
      "path": "block/Datepicker/dtepicker-02/date-picker.tsx",
      "target": "components/block/Datepicker/dtepicker-02/date-picker.tsx"
    }
  ]
}