{
  "name": "authcard-01",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "input"
  ],
  "dependencies": [
    "lucide-react",
    "@hookform/resolvers/zod",
    "zod",
    "react-hook-form",
    "react-icons"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Eye, EyeOff, Mail } from \"lucide-react\";\r\nimport { FaLinkedin } from \"react-icons/fa6\";\r\nimport Image from \"next/image\";\r\n\r\nconst formSchema = z.object({\r\n  firstName: z.string().min(2, {\r\n    message: \"First name must be at least 2 characters.\",\r\n  }),\r\n  lastName: z.string().min(2, {\r\n    message: \"Last name must be at least 2 characters.\",\r\n  }),\r\n  email: z.string().email({\r\n    message: \"Please enter a valid email address.\",\r\n  }),\r\n  password: z.string().min(8, {\r\n    message: \"Password must be at least 8 characters.\",\r\n  }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nexport default function AuthCard01() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      console.log(\"Form submitted:\", data);\r\n\r\n      toast({\r\n        title: \"Account created\",\r\n        description: \"You have successfully created an account.\",\r\n      });\r\n\r\n      reset();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Something went wrong. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClearPassword = () => {\r\n    reset({ password: \"\" }, { keepValues: false });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-[400px] rounded-[22px] bg-[#ffffff] p-6 shadow-md dark:bg-zinc-800 sm:p-8\">\r\n      <div className=\"mb-6 flex flex-col items-center\">\r\n        <Image src=\"/images/spectrum.svg\" alt=\"Logo\" width={70} height={70} className=\"mb-4\" />\r\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\r\n          Create an account\r\n        </h1>\r\n        <p className=\"mt-1 text-center text-sm text-gray-600 dark:text-zinc-400\">\r\n          Please enter your details to create an account.\r\n        </p>\r\n      </div>\r\n\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"mb-6 flex w-full items-center justify-center gap-2 border-gray-300 bg-white text-gray-800 hover:bg-gray-50 dark:border-zinc-700 dark:bg-zinc-800 dark:text-zinc-200 dark:hover:bg-zinc-700\"\r\n        type=\"button\"\r\n      >\r\n        <FaLinkedin className=\"h-5 w-5 text-[#0077B5]\" />\r\n        <span>Continue with LinkedIn</span>\r\n      </Button>\r\n\r\n      <div className=\"mb-6 flex items-center justify-center\">\r\n        <div className=\"relative w-full\">\r\n          <div className=\"absolute inset-0 flex items-center\">\r\n            <div className=\"w-full border-t border-gray-300 dark:border-zinc-700\"></div>\r\n          </div>\r\n          <div className=\"relative flex justify-center\">\r\n            <span className=\"bg-white px-4 text-xs text-gray-500 dark:bg-zinc-800 dark:text-zinc-500\">\r\n              OR\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div className=\"space-y-1\">\r\n            <label\r\n              htmlFor=\"firstName\"\r\n              className=\"text-sm font-medium text-gray-700 dark:text-zinc-300\"\r\n            >\r\n              First Name\r\n            </label>\r\n            <Input\r\n              id=\"firstName\"\r\n              placeholder=\"James\"\r\n              {...register(\"firstName\")}\r\n              className={`${\r\n                errors.firstName\r\n                  ? \"border-red-500\"\r\n                  : \"border-gray-300 dark:border-zinc-700\"\r\n              } bg-white py-2 dark:bg-zinc-800 rounded-lg`}\r\n            />\r\n            {errors.firstName && (\r\n              <p className=\"mt-1 flex items-center gap-2 text-sm font-medium text-red-500 border-l-2 border-red-500 pl-2 rounded-md bg-red-500/5\">{errors.firstName.message}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"space-y-1\">\r\n            <label\r\n              htmlFor=\"lastName\"\r\n              className=\"text-sm font-medium text-gray-700 dark:text-zinc-300\"\r\n            >\r\n              Last Name\r\n            </label>\r\n            <Input\r\n              id=\"lastName\"\r\n              placeholder=\"Brown\"\r\n              {...register(\"lastName\")}\r\n              className={`${\r\n                errors.lastName\r\n                  ? \"border-red-500\"\r\n                  : \"border-gray-300 dark:border-zinc-700\"\r\n              } bg-white py-2 dark:bg-zinc-800 rounded-lg`}\r\n            />\r\n            {errors.lastName && (\r\n              <p className=\"mt-1 flex items-center gap-2 text-sm font-medium text-red-500 border-l-2 border-red-500 pl-2 rounded-md bg-red-500/5\">{errors.lastName.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-1\">\r\n          <label\r\n            htmlFor=\"email\"\r\n            className=\"text-sm font-medium text-gray-700 dark:text-zinc-300\"\r\n          >\r\n            Email Address\r\n          </label>\r\n          <div className=\"relative\">\r\n            <Input\r\n              id=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"hello@example.com\"\r\n              {...register(\"email\")}\r\n              className={`${\r\n                errors.email\r\n                  ? \"border-red-500\"\r\n                  : \"border-gray-300 dark:border-zinc-700\"\r\n              } bg-white py-2 pr-10 dark:bg-zinc-800 rounded-lg`}\r\n            />\r\n            <Mail className=\"absolute right-3 top-1/2 h-5 w-5 -translate-y-1/2 text-teal-500\" />\r\n          </div>\r\n          {errors.email && (\r\n            <p className=\"mt-1 flex items-center gap-2 text-sm font-medium text-red-500 border-l-2 border-red-500 pl-2 rounded-md bg-red-500/5\">{errors.email.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"space-y-1\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <label\r\n              htmlFor=\"password\"\r\n              className=\"text-sm font-medium text-gray-700 dark:text-zinc-300\"\r\n            >\r\n              Password\r\n            </label>\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleClearPassword}\r\n              className=\"text-xs text-gray-500 hover:text-gray-700 dark:text-zinc-500 dark:hover:text-zinc-300\"\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n          <div className=\"relative\">\r\n            <Input\r\n              id=\"password\"\r\n              type={showPassword ? \"text\" : \"password\"}\r\n              placeholder=\"••••••••••\"\r\n              {...register(\"password\")}\r\n              className={`${\r\n                errors.password\r\n                  ? \"border-red-500\"\r\n                  : \"border-gray-300 dark:border-zinc-700\"\r\n              } bg-white py-2 pr-10 dark:bg-zinc-800 rounded-lg`}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setShowPassword(!showPassword)}\r\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none dark:text-zinc-500 dark:hover:text-zinc-300\"\r\n              tabIndex={-1}\r\n            >\r\n              {showPassword ? (\r\n                <EyeOff className=\"h-5 w-5\" />\r\n              ) : (\r\n                <Eye className=\"h-5 w-5\" />\r\n              )}\r\n            </button>\r\n          </div>\r\n          {errors.password && (\r\n            <p className=\"mt-1 flex items-center gap-2 text-sm font-medium text-red-500 border-l-2 border-red-500 pl-2 rounded-md bg-red-500/5\">{errors.password.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"mt-6 w-full rounded-lg from-blue-600 to-blue-500 text-white bg-gradient-to-t \r\n    border border-b-2 border-blue-900/40 shadow-md shadow-blue-900/20 \r\n    ring-1 ring-inset ring-white/25 \r\n    transition-[filter] duration-200 hover:brightness-110 active:brightness-90 \r\n    dark:shadow-[inset_0_1px_3px_0_rgba(255,255,255,0.1)] \r\n    dark:border-x-0 dark:border-t-0 dark:border-blue-900/50 \r\n    dark:ring-white/5 dark:from-blue-700 dark:to-blue-600\"\r\n          disabled={isSubmitting}\r\n        >\r\n          {isSubmitting ? \"Processing...\" : \"Continue\"}\r\n        </Button>\r\n\r\n        <div className=\"mt-4 text-center text-sm text-gray-600 dark:text-zinc-400\">\r\n          Already have an account?{\" \"}\r\n          <Link\r\n            href=\"/login\"\r\n            className=\"font-medium text-blue-600 hover:text-blue-500 dark:text-blue-500 dark:hover:text-blue-400\"\r\n          >\r\n            Login\r\n          </Link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "block/AuthCard/authcard-01/authcard.tsx",
      "target": "components/block/AuthCard/authcard-01/authcard.tsx"
    }
  ]
}