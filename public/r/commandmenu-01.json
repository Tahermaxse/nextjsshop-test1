{
  "name": "commandmenu-01",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "avatar",
    "command"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ArrowDown, ArrowUp, Check, X } from \"lucide-react\";\n\nimport {\n  CommandDialog,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ntype FilterType = \"People\" | \"Files\" | \"Emails\" | \"Actions\";\n\nexport function CommandMenu01() {\n  const [open, setOpen] = React.useState(false);\n  const [filters, setFilters] = React.useState<FilterType[]>([\n    \"People\",\n    \"Files\",\n    \"Emails\",\n    \"Actions\",\n  ]);\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  const removeFilter = (filter: FilterType) => {\n    setFilters(filters.filter((f) => f !== filter));\n  };\n\n  const historyItems = [\n    {\n      name: \"James Brown\",\n      username: \"@james\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    {\n      name: \"Sophia Williams\",\n      username: \"@sophia\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n  ];\n\n  const resultItems = [\n    {\n      name: \"Matthew Johnson\",\n      username: \"@matthew\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    {\n      name: \"Laura Perez\",\n      username: \"@laura\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    {\n      name: \"Wei Chen\",\n      username: \"@wei\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    {\n      name: \"Lena Müller\",\n      username: \"@lena\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n    {\n      name: \"Juma Omondi\",\n      username: \"@juma\",\n      avatar: \"/placeholder.svg?height=40&width=40\",\n    },\n  ];\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        className=\"relative h-9 w-full justify-start rounded-[0.5rem] bg-background text-sm text-muted-foreground sm:pr-12 md:w-40 lg:w-64\"\n        onClick={() => setOpen(true)}\n      >\n        <span className=\"hidden lg:inline-flex\">Search or jump to...</span>\n        <span className=\"inline-flex lg:hidden\">Search...</span>\n        <kbd className=\"pointer-events-none  absolute right-1.5 top-1.5 hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex\">\n          <span className=\"text-xs\">⌘</span>K\n        </kbd>\n      </Button>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <div className=\"flex items-center border-b px-3\">\n          <CommandInput\n            placeholder=\"Search or jump to\"\n            className=\"h-11 flex-1\"\n          />\n          <kbd className=\"ml-auto hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex\">\n            ⌘K\n          </kbd>\n        </div>\n\n        <CommandList>\n          <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n            What are you looking for?\n          </div>\n          <div className=\"flex flex-wrap gap-1 px-3 pb-2\">\n            {filters.map((filter) => (\n              <Badge\n                key={filter}\n                variant=\"outline\"\n                className=\"flex items-center gap-1 rounded-md px-2 py-1\"\n              >\n                {filter}\n                <X\n                  className=\"h-3 w-3 cursor-pointer\"\n                  onClick={() => removeFilter(filter)}\n                />\n              </Badge>\n            ))}\n          </div>\n          <CommandSeparator />\n          <CommandGroup\n            heading={\n              <div className=\"flex items-center justify-between\">\n                <span>History</span>\n                <Button variant=\"link\" size=\"sm\" className=\"h-auto p-0 text-xs\">\n                  See All\n                </Button>\n              </div>\n            }\n          >\n            {historyItems.map((item) => (\n              <CommandItem\n                key={item.username}\n                className=\"flex items-center gap-2 px-4 py-2\"\n              >\n                <Avatar className=\"h-6 w-6\">\n                  <AvatarImage\n                    src={item.avatar || \"/placeholder.svg\"}\n                    alt={item.name}\n                  />\n                  <AvatarFallback>{item.name[0]}</AvatarFallback>\n                </Avatar>\n                <span>{item.name}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {item.username}\n                </span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandSeparator />\n          <CommandGroup\n            heading={\n              <div className=\"flex items-center justify-between\">\n                <span>Results (4)</span>\n                <Button variant=\"link\" size=\"sm\" className=\"h-auto p-0 text-xs\">\n                  See All\n                </Button>\n              </div>\n            }\n          >\n            {resultItems.map((item) => (\n              <CommandItem\n                key={item.username}\n                className=\"flex items-center gap-2 px-4 py-2\"\n              >\n                <Avatar className=\"h-6 w-6\">\n                  <AvatarImage\n                    src={item.avatar || \"/placeholder.svg\"}\n                    alt={item.name}\n                  />\n                  <AvatarFallback>{item.name[0]}</AvatarFallback>\n                </Avatar>\n                <span>{item.name}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {item.username}\n                </span>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandSeparator />\n          <div className=\"flex items-center justify-between border-t p-2 px-3\">\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <ArrowUp className=\"h-3 w-3\" />\n              <ArrowDown className=\"h-3 w-3\" />\n              <span>Navigate</span>\n              <Check className=\"h-3 w-3 ml-2\" />\n              <span>Select</span>\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Not what you&apos;re looking for? Try the{\" \"}\n              <Button variant=\"link\" size=\"sm\" className=\"h-auto p-0 text-xs text-blue-500 \">\n                Help Center\n              </Button>\n            </div>\n          </div>\n        </CommandList>\n      </CommandDialog>\n    </>\n  );\n}\n",
      "path": "block/CommandMenu/commandmenu-01/command-menu.tsx",
      "target": "components/block/CommandMenu/commandmenu-01/command-menu.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Dialog = DialogPrimitive.Root\r\n\r\nconst DialogTrigger = DialogPrimitive.Trigger\r\n\r\nconst DialogPortal = DialogPrimitive.Portal\r\n\r\nconst DialogClose = DialogPrimitive.Close\r\n\r\nconst DialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Overlay\r\n    ref={ref}\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\r\n\r\ninterface DialogContentProps extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> {\r\n  hideCloseButton?: boolean\r\n}\r\n\r\nconst DialogContent = React.forwardRef<React.ElementRef<typeof DialogPrimitive.Content>, DialogContentProps>(\r\n  ({ className, children, hideCloseButton = false, ...props }, ref) => (\r\n    <DialogPortal>\r\n      <DialogOverlay />\r\n      <DialogPrimitive.Content\r\n        ref={ref}\r\n        className={cn(\r\n          \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n        {!hideCloseButton && (\r\n          <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\r\n            <X className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Close</span>\r\n          </DialogPrimitive.Close>\r\n        )}\r\n      </DialogPrimitive.Content>\r\n    </DialogPortal>\r\n  ),\r\n)\r\nDialogContent.displayName = DialogPrimitive.Content.displayName\r\n\r\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\r\n)\r\nDialogHeader.displayName = \"DialogHeader\"\r\n\r\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\r\n)\r\nDialogFooter.displayName = \"DialogFooter\"\r\n\r\nconst DialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nDialogTitle.displayName = DialogPrimitive.Title.displayName\r\n\r\nconst DialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof DialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />\r\n))\r\nDialogDescription.displayName = DialogPrimitive.Description.displayName\r\n\r\nexport {\r\n  Dialog,\r\n  DialogPortal,\r\n  DialogOverlay,\r\n  DialogClose,\r\n  DialogTrigger,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogFooter,\r\n  DialogTitle,\r\n  DialogDescription,\r\n}\r\n\r\n",
      "path": "block/CommandMenu/commandmenu-01/dialog.tsx",
      "target": "components/block/CommandMenu/commandmenu-01/dialog.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport function useMobile() {\r\n  const [isMobile, setIsMobile] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const checkIfMobile = () => {\r\n      setIsMobile(window.innerWidth < 768)\r\n    }\r\n\r\n    // Initial check\r\n    checkIfMobile()\r\n\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", checkIfMobile)\r\n\r\n    // Clean up\r\n    return () => window.removeEventListener(\"resize\", checkIfMobile)\r\n  }, [])\r\n\r\n  return isMobile\r\n}\r\n\r\n",
      "path": "block/CommandMenu/commandmenu-01/hooks/use-mobile.tsx",
      "target": "components/block/CommandMenu/commandmenu-01/hooks/use-mobile.tsx"
    }
  ]
}