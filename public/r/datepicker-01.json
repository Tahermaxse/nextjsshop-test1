{
  "name": "datepicker-01",
  "type": "registry:block",
  "registryDependencies": [
    "button",
    "checkbox",
    "input",
    "label"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect, useRef, type KeyboardEvent } from \"react\"\r\nimport { Calendar, ChevronLeft, ChevronRight, X, Info, Clock } from \"lucide-react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useMediaQuery } from \"./hooks/use-media-query\"\r\n\r\ninterface DatePickerProps {\r\n  onClose?: () => void\r\n  onSchedule?: (data: {\r\n    startDate: string\r\n    startTime: string\r\n    endDate: string\r\n    endTime: string\r\n    maxParticipants: number\r\n    openToAll: boolean\r\n  }) => void\r\n  initialStartDate?: Date\r\n  initialEndDate?: Date\r\n  className?: string\r\n}\r\n\r\nexport default function DatePicker({\r\n  onClose,\r\n  onSchedule,\r\n  initialStartDate = new Date(2024, 0, 11),\r\n  initialEndDate = new Date(2024, 0, 21),\r\n  className,\r\n}: DatePickerProps) {\r\n  const [currentMonth, setCurrentMonth] = useState<Date>(() => new Date(2024, 0, 1))\r\n  const [selectedStartDate, setSelectedStartDate] = useState<Date | null>(null)\r\n  const [selectedEndDate, setSelectedEndDate] = useState<Date | null>(null)\r\n  const [startTime, setStartTime] = useState(\"09:00\")\r\n  const [endTime, setEndTime] = useState(\"09:00\")\r\n  const [maxParticipants, setMaxParticipants] = useState(10)\r\n  const [openToAll, setOpenToAll] = useState(true)\r\n  const [calendarDays, setCalendarDays] = useState<Date[]>([])\r\n  const [focusedDate, setFocusedDate] = useState<number | null>(null)\r\n\r\n  const calendarRef = useRef<HTMLDivElement>(null)\r\n  const modalRef = useRef<HTMLDivElement>(null)\r\n  const isMobile = useMediaQuery(\"(max-width: 640px)\")\r\n\r\n  // Initialize with the provided date range - only run once\r\n  useEffect(() => {\r\n    setSelectedStartDate(initialStartDate)\r\n    setSelectedEndDate(initialEndDate)\r\n    setCurrentMonth(new Date(initialStartDate.getFullYear(), initialStartDate.getMonth(), 1))\r\n  }, []) // Empty dependency array to run only once\r\n\r\n  // Handle click outside to close\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {\r\n        onClose?.()\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [onClose])\r\n\r\n  // Handle escape key to close\r\n  useEffect(() => {\r\n    const handleEscapeKey = (event: KeyboardEvent) => {\r\n      if (event.key === \"Escape\") {\r\n        onClose?.()\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", handleEscapeKey as any)\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleEscapeKey as any)\r\n    }\r\n  }, [onClose])\r\n\r\n  // Generate calendar days for the current month\r\n  useEffect(() => {\r\n    const generateCalendarDays = () => {\r\n      const days: Date[] = []\r\n      const year = currentMonth.getFullYear()\r\n      const month = currentMonth.getMonth()\r\n\r\n      // Get the first day of the month\r\n      const firstDay = new Date(year, month, 1)\r\n      // Get the last day of the month\r\n      const lastDay = new Date(year, month + 1, 0)\r\n\r\n      // Get the day of the week for the first day (0 = Sunday, 1 = Monday, etc.)\r\n      let firstDayOfWeek = firstDay.getDay()\r\n      // Adjust for Monday as first day of week\r\n      firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1\r\n\r\n      // Add days from previous month to fill the first row\r\n      for (let i = firstDayOfWeek; i > 0; i--) {\r\n        const prevMonthDay = new Date(year, month, 1 - i)\r\n        days.push(prevMonthDay)\r\n      }\r\n\r\n      // Add all days of the current month\r\n      for (let i = 1; i <= lastDay.getDate(); i++) {\r\n        days.push(new Date(year, month, i))\r\n      }\r\n\r\n      // Calculate how many more days we need to complete the grid\r\n      // We'll show exactly 6 weeks (42 days) to match the design\r\n      const remainingDays = 42 - days.length\r\n\r\n      // Add days from next month to complete the grid\r\n      for (let i = 1; i <= remainingDays; i++) {\r\n        days.push(new Date(year, month + 1, i))\r\n      }\r\n\r\n      return days\r\n    }\r\n\r\n    setCalendarDays(generateCalendarDays())\r\n  }, [currentMonth])\r\n\r\n  const handlePrevMonth = () => {\r\n    setCurrentMonth((prevMonth) => {\r\n      return new Date(prevMonth.getFullYear(), prevMonth.getMonth() - 1, 1)\r\n    })\r\n  }\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentMonth((prevMonth) => {\r\n      return new Date(prevMonth.getFullYear(), prevMonth.getMonth() + 1, 1)\r\n    })\r\n  }\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    if (!selectedStartDate || (selectedStartDate && selectedEndDate)) {\r\n      // Start a new selection\r\n      setSelectedStartDate(date)\r\n      setSelectedEndDate(null)\r\n    } else {\r\n      // Complete the selection\r\n      if (date < selectedStartDate) {\r\n        setSelectedEndDate(selectedStartDate)\r\n        setSelectedStartDate(date)\r\n      } else {\r\n        setSelectedEndDate(date)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDateKeyDown = (e: KeyboardEvent<HTMLButtonElement>, index: number) => {\r\n    const currentIndex = focusedDate !== null ? focusedDate : index\r\n    let newIndex = currentIndex\r\n\r\n    switch (e.key) {\r\n      case \"ArrowRight\":\r\n        newIndex = Math.min(currentIndex + 1, calendarDays.length - 1)\r\n        e.preventDefault()\r\n        break\r\n      case \"ArrowLeft\":\r\n        newIndex = Math.max(currentIndex - 1, 0)\r\n        e.preventDefault()\r\n        break\r\n      case \"ArrowUp\":\r\n        newIndex = Math.max(currentIndex - 7, 0)\r\n        e.preventDefault()\r\n        break\r\n      case \"ArrowDown\":\r\n        newIndex = Math.min(currentIndex + 7, calendarDays.length - 1)\r\n        e.preventDefault()\r\n        break\r\n      case \"Enter\":\r\n      case \" \":\r\n        handleDateClick(calendarDays[currentIndex])\r\n        e.preventDefault()\r\n        break\r\n      default:\r\n        return\r\n    }\r\n\r\n    setFocusedDate(newIndex)\r\n\r\n    // Focus the new date button\r\n    const buttons = calendarRef.current?.querySelectorAll(\"button[data-date]\")\r\n    if (buttons && buttons[newIndex]) {\r\n      ;(buttons[newIndex] as HTMLButtonElement).focus()\r\n    }\r\n  }\r\n\r\n  const isDateInRange = (date: Date) => {\r\n    if (!selectedStartDate || !selectedEndDate) return false\r\n    return date >= selectedStartDate && date <= selectedEndDate\r\n  }\r\n\r\n  const isDateSelected = (date: Date) => {\r\n    if (!selectedStartDate) return false\r\n    if (selectedEndDate) {\r\n      return date.getTime() === selectedStartDate.getTime() || date.getTime() === selectedEndDate.getTime()\r\n    }\r\n    return date.getTime() === selectedStartDate.getTime()\r\n  }\r\n\r\n  const formatDate = (date: Date | null) => {\r\n    if (!date) return \"\"\r\n    const year = date.getFullYear()\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\")\r\n    const day = String(date.getDate()).padStart(2, \"0\")\r\n    return `${year}-${month}-${day}`\r\n  }\r\n\r\n  const formatDisplayDate = (date: Date | null) => {\r\n    if (!date) return \"\"\r\n    return date.toLocaleDateString(\"en-US\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n    })\r\n  }\r\n\r\n  const formatInputDate = (date: Date | null) => {\r\n    if (!date) return \"\"\r\n    const day = String(date.getDate()).padStart(2, \"0\")\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\")\r\n    const year = date.getFullYear()\r\n    return `${day}-${month}-${year}`\r\n  }\r\n\r\n  const handleSchedule = () => {\r\n    if (!selectedStartDate || !selectedEndDate) return\r\n\r\n    onSchedule?.({\r\n      startDate: formatDate(selectedStartDate),\r\n      startTime,\r\n      endDate: formatDate(selectedEndDate),\r\n      endTime,\r\n      maxParticipants,\r\n      openToAll,\r\n    })\r\n  }\r\n\r\n  const daysOfWeek = isMobile ? [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"] : [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]\r\n\r\n  return (\r\n    <div className=\"fixed z-[999] inset-0 flex items-center justify-center bg-black/50  p-2 sm:p-4\">\r\n      <div\r\n        ref={modalRef}\r\n        className={cn(\r\n          \"bg-background dark:bg-zinc-900 rounded-[20px] shadow-lg w-full max-w-3xl\",\r\n          \"animate-in fade-in-0 zoom-in-95 duration-200\",\r\n          \"max-h-[calc(100vh-16px)] overflow-auto\",\r\n          \"dark:border dark:border-zinc-800\",\r\n          className,\r\n        )}\r\n      >\r\n        {/* Header */}\r\n        <div className=\"sticky top-0 z-10 bg-background dark:bg-zinc-900 flex items-center p-3 sm:p-4 border-b dark:border-zinc-800\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"bg-muted dark:bg-zinc-800 rounded-full p-1.5 sm:p-3 mr-2 sm:mr-3 flex-shrink-0\">\r\n              <Calendar className=\"h-4 w-4 sm:h-5 sm:w-5 text-muted-foreground dark:text-zinc-400\" />\r\n            </div>\r\n            <div>\r\n              <h2 className=\"text-lg sm:text-xl font-semibold dark:text-zinc-100\">Event Calendar</h2>\r\n              <p className=\"text-xs sm:text-sm text-muted-foreground dark:text-zinc-400\">Schedule your team meetings and events easily</p>\r\n            </div>\r\n          </div>\r\n          <button onClick={onClose} className=\"ml-auto text-muted-foreground hover:text-foreground dark:text-zinc-400 dark:hover:text-zinc-300\" aria-label=\"Close\">\r\n            <X className=\"h-5 w-5\" />\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex flex-col md:flex-row md:divide-x dark:divide-zinc-800\">\r\n          {/* Calendar */}\r\n          <div className=\"p-3 sm:p-4 md:w-1/2\">\r\n            {/* Month navigation */}\r\n            <div className=\"flex items-center justify-between mb-2 sm:mb-4\">\r\n              <button\r\n                onClick={handlePrevMonth}\r\n                className=\"p-1.5 sm:p-2 rounded-full hover:bg-muted dark:hover:bg-zinc-800\"\r\n                aria-label=\"Previous month\"\r\n              >\r\n                <ChevronLeft className=\"h-4 w-4 sm:h-5 sm:w-5 dark:text-zinc-400\" />\r\n              </button>\r\n              <h3 className=\"text-base sm:text-lg font-medium dark:text-zinc-100\">\r\n                {currentMonth.toLocaleDateString(\"en-US\", { month: \"long\", year: \"numeric\" })}\r\n              </h3>\r\n              <button\r\n                onClick={handleNextMonth}\r\n                className=\"p-1.5 sm:p-2 rounded-full hover:bg-muted dark:hover:bg-zinc-800\"\r\n                aria-label=\"Next month\"\r\n              >\r\n                <ChevronRight className=\"h-4 w-4 sm:h-5 sm:w-5 dark:text-zinc-400\" />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Calendar grid */}\r\n            <div ref={calendarRef} className=\"grid grid-cols-7 gap-0.5 sm:gap-1\" role=\"grid\" aria-label=\"Calendar\">\r\n              {/* Days of week */}\r\n              {daysOfWeek.map((day) => (\r\n                <div\r\n                  key={day}\r\n                  className=\"text-center text-xs font-medium text-muted-foreground dark:text-zinc-500 py-1 sm:py-2\"\r\n                  role=\"columnheader\"\r\n                >\r\n                  {isMobile ? day.substring(0, 1) : day}\r\n                </div>\r\n              ))}\r\n\r\n              {/* Calendar days */}\r\n              {calendarDays.map((date, index) => {\r\n                const isCurrentMonth = date.getMonth() === currentMonth.getMonth()\r\n                const isToday = new Date().toDateString() === date.toDateString()\r\n                const isSelected = isDateSelected(date)\r\n                const isInRange = isDateInRange(date)\r\n                const isRangeStart = selectedStartDate && date.getTime() === selectedStartDate.getTime()\r\n                const isRangeEnd = selectedEndDate && date.getTime() === selectedEndDate.getTime()\r\n\r\n                return (\r\n                  <button\r\n                    key={index}\r\n                    data-date={date.toISOString()}\r\n                    onClick={() => handleDateClick(date)}\r\n                    onKeyDown={(e) => handleDateKeyDown(e, index)}\r\n                    className={cn(\r\n                      \"h-8 w-8 sm:h-10 sm:w-10 rounded-full flex items-center justify-center text-xs sm:text-sm relative\",\r\n                      \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-zinc-900\",\r\n                      \"transition-colors duration-200\",\r\n                      !isCurrentMonth && \"text-muted-foreground/50 dark:text-zinc-700\",\r\n                      isCurrentMonth && !isSelected && !isInRange && \"dark:text-zinc-300\",\r\n                      isToday && !isSelected && \"border border-blue-500 dark:border-blue-500\",\r\n                      isSelected && \"bg-blue-500 text-white\",\r\n                      isInRange && !isSelected && \"bg-blue-500/10 dark:bg-blue-500/20 dark:text-blue-400\",\r\n                      isRangeStart && \"rounded-r-none\",\r\n                      isRangeEnd && \"rounded-l-none\",\r\n                      !isSelected && !isInRange && \"hover:bg-muted dark:hover:bg-zinc-800\",\r\n                    )}\r\n                    aria-selected={isSelected || isInRange}\r\n                    aria-current={isToday ? \"date\" : undefined}\r\n                    tabIndex={focusedDate === index ? 0 : -1}\r\n                    role=\"gridcell\"\r\n                  >\r\n                    {date.getDate()}\r\n                  </button>\r\n                )\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Form */}\r\n          <div className=\"p-3 sm:p-4 space-y-3 sm:space-y-4 md:w-1/2\">\r\n            {/* Start date */}\r\n            <div className=\"space-y-1 sm:space-y-2\">\r\n              <Label htmlFor=\"start-date\" className=\"flex items-center text-xs sm:text-sm dark:text-zinc-300\">\r\n                Start date\r\n                <span className=\"text-blue-500 ml-1\">*</span>\r\n              </Label>\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                <div className=\"relative col-span-1\">\r\n                  <Input\r\n                    id=\"start-date\"\r\n                    type=\"text\"\r\n                    value={selectedStartDate ? formatInputDate(selectedStartDate) : \"\"}\r\n                    readOnly\r\n                    className=\"pl-2 pr-8 h-9 sm:h-10 text-xs sm:text-sm dark:bg-zinc-800 dark:border-zinc-700 dark:text-zinc-300\"\r\n                    required\r\n                    aria-required=\"true\"\r\n                  />\r\n                  <Calendar className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground dark:text-zinc-500 pointer-events-none\" />\r\n                </div>\r\n                <div className=\"relative col-span-1\">\r\n                  <Input\r\n                    type=\"time\"\r\n                    value={startTime}\r\n                    onChange={(e) => setStartTime(e.target.value)}\r\n                    className=\"pl-2 pr-8 h-9 sm:h-10 text-xs sm:text-sm dark:bg-zinc-800 dark:border-zinc-700 dark:text-zinc-300\"\r\n                    aria-label=\"Start time\"\r\n                  />\r\n                  <Clock className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground dark:text-zinc-500 pointer-events-none\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* End date */}\r\n            <div className=\"space-y-1 sm:space-y-2\">\r\n              <Label htmlFor=\"end-date\" className=\"flex items-center text-xs sm:text-sm dark:text-zinc-300\">\r\n                End date\r\n                <span className=\"text-blue-500 ml-1\">*</span>\r\n              </Label>\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                <div className=\"relative col-span-1\">\r\n                  <Input\r\n                    id=\"end-date\"\r\n                    type=\"text\"\r\n                    value={selectedEndDate ? formatInputDate(selectedEndDate) : \"\"}\r\n                    readOnly\r\n                    className=\"pl-2 pr-8 h-9 sm:h-10 text-xs sm:text-sm dark:bg-zinc-800 dark:border-zinc-700 dark:text-zinc-300\"\r\n                    required\r\n                    aria-required=\"true\"\r\n                  />\r\n                  <Calendar className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground dark:text-zinc-500 pointer-events-none\" />\r\n                </div>\r\n                <div className=\"relative col-span-1\">\r\n                  <Input\r\n                    type=\"time\"\r\n                    value={endTime}\r\n                    onChange={(e) => setEndTime(e.target.value)}\r\n                    className=\"pl-2 pr-8 h-9 sm:h-10 text-xs sm:text-sm dark:bg-zinc-800 dark:border-zinc-700 dark:text-zinc-300\"\r\n                    aria-label=\"End time\"\r\n                  />\r\n                  <Clock className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground dark:text-zinc-500 pointer-events-none\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Maximum participants */}\r\n            <div className=\"space-y-1 sm:space-y-2\">\r\n              <div className=\"flex items-center\">\r\n                <Label htmlFor=\"max-participants\" className=\"text-xs sm:text-sm dark:text-zinc-300\">\r\n                  Maximum participants\r\n                </Label>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"ml-1 text-muted-foreground hover:text-foreground dark:text-zinc-500 dark:hover:text-zinc-400\"\r\n                  aria-label=\"Information about maximum participants\"\r\n                >\r\n                  <Info className=\"h-3 w-3 sm:h-4 sm:w-4\" />\r\n                </button>\r\n              </div>\r\n              <Input\r\n                id=\"max-participants\"\r\n                type=\"number\"\r\n                min=\"1\"\r\n                value={maxParticipants}\r\n                onChange={(e) => setMaxParticipants(Number.parseInt(e.target.value) || 1)}\r\n                className=\"h-9 sm:h-10 text-xs sm:text-sm dark:bg-zinc-800 dark:border-zinc-700 dark:text-zinc-300\"\r\n                aria-label=\"Maximum number of participants\"\r\n              />\r\n            </div>\r\n\r\n            {/* Open to all departments */}\r\n            <div className=\"flex items-start space-x-2 pt-1 sm:pt-2\">\r\n              <Checkbox\r\n                id=\"open-to-all\"\r\n                checked={openToAll}\r\n                onCheckedChange={(checked) => setOpenToAll(checked as boolean)}\r\n                className=\"mt-0.5 dark:border-zinc-700\"\r\n              />\r\n              <Label\r\n                htmlFor=\"open-to-all\"\r\n                className=\"text-xs sm:text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 dark:text-zinc-300\"\r\n              >\r\n                Open to all departments\r\n              </Label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"sticky bottom-0 z-10 bg-background dark:bg-zinc-900 p-3 sm:p-4 border-t dark:border-zinc-800 flex flex-col sm:flex-row items-center justify-between gap-2 sm:gap-4\">\r\n          <div className=\"text-xs sm:text-sm text-muted-foreground dark:text-zinc-400 w-full sm:w-auto text-center sm:text-left truncate\">\r\n            Range:{\" \"}\r\n            <span className=\"text-gray-800 dark:text-zinc-300\">\r\n            {selectedStartDate && selectedEndDate\r\n              ? `${formatDisplayDate(selectedStartDate)} - ${formatDisplayDate(selectedEndDate)}`\r\n              : \"Select a date range\"}\r\n              </span>\r\n          </div>\r\n          <div className=\"flex gap-2 w-full sm:w-auto\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={onClose}\r\n              className=\"flex-1 sm:flex-initial h-8 sm:h-10 text-xs sm:text-sm px-3 sm:px-4 dark:border-zinc-700 dark:text-zinc-300 dark:hover:bg-zinc-800\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleSchedule}\r\n              disabled={!selectedStartDate || !selectedEndDate}\r\n              className=\"flex-1 sm:flex-initial h-8 sm:h-10 text-xs sm:text-sm px-3 sm:px-4 bg-blue-500 hover:bg-blue-600 dark:bg-blue-500 dark:hover:bg-blue-600 text-white\"\r\n            >\r\n              Schedule meetings\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n",
      "path": "block/Datepicker/datepicker-01/date-picker.tsx",
      "target": "components/block/Datepicker/datepicker-01/date-picker.tsx"
    },
    {
      "type": "registry:block",
      "content": "\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\n\r\nexport function useMediaQuery(query: string): boolean {\r\n  const [matches, setMatches] = useState(false)\r\n\r\n  useEffect(() => {\r\n    // Check if window is available (for SSR)\r\n    if (typeof window !== \"undefined\") {\r\n      const media = window.matchMedia(query)\r\n\r\n      // Initial check\r\n      setMatches(media.matches)\r\n\r\n      // Add listener for changes\r\n      const listener = () => setMatches(media.matches)\r\n      media.addEventListener(\"change\", listener)\r\n\r\n      // Clean up\r\n      return () => media.removeEventListener(\"change\", listener)\r\n    }\r\n\r\n    return undefined\r\n  }, [query]) // Only depend on query, not matches\r\n\r\n  return matches\r\n}\r\n\r\n",
      "path": "block/Datepicker/datepicker-01/hooks/use-media-query.ts",
      "target": "components/block/Datepicker/datepicker-01/hooks/use-media-query.ts"
    }
  ]
}